#!/usr/bin/env ruby
#
require 'pathname'
ENV['BUNDLE_GEMFILE'] ||= File.expand_path("../../Gemfile", Pathname.new(__FILE__).realpath)
require 'bundler/setup'
$LOAD_PATH.unshift File.expand_path '../../lib', __FILE__


require 'biblimatch'
require 'csv_port'
require 'hippocampome'
require 'highline/import'

require File.expand_path('../config', '__FILE__')
require File.expand_path('../db/db_connection', '__FILE__')
require File.expand_path('../db/models', '__FILE__')

#default_article_filepath = "/Users/seanmackesey/google_drive/hc/data/article.csv"
default_article_filepath = "/Users/djh/wd/portal/dat/csv/article.csv"
#default_pmid_filepath = "/Users/seanmackesey/Desktop/pmids.txt"
default_pmid_filepath = "/Users/djh/wd/portal/dat/pmids.txt"

article_filepath = ask "Enter path to article file (press return for default): "
article_filepath = default_article_filepath if article_filepath.empty?
article_table = CSV.read(article_filepath, headers: true, header_converters: :symbol)
#source_ids = Article.map(:pmid_isbn)
source_ids = article_table[:pmid_isbn].uniq

pmid_filepath = ask "Enter path to source id file: "
pmid_filepath = default_pmid_filepath if pmid_filepath.empty?
sources_to_add = File.readlines(pmid_filepath).map{|li| li.chomp}.compact.uniq.reject{|x|x.include? "-"}

add_to_db = ask "Add to DB (y/n)? "
add_to_db = (add_to_db == 'y' ? true : false)
sources_to_add_db = sources_to_add.dup

puts "BEFORE: "
sources_to_add.each do |source| puts source end
puts
sources_to_add.reject!{|s| source_ids.include?(s)}
puts "AFTER: "
sources_to_add.each do |source| puts source end

if sources_to_add.any?
  sources_to_add.each do |pmid|
    hash = Biblimatch::Matcher.new({PMID: pmid}, :pubmed, output_database: :hippocampome).match
    row_values = article_table.headers.map do |header|
      (hash[header] or nil)
    end
    article_table << row_values
  end
  File.write(article_filepath, article_table.to_csv)
  puts "All sources added!"
else
  puts "No new sources!"
end
#binding.pry
sources_to_add_db.reject! { |source| Article[pmid_isbn: source.to_i] }
if sources_to_add_db.any?
  sources_to_add_db.each do |pmid|
    hash = Biblimatch::Matcher.new({PMID: pmid}, :pubmed, output_database: :hippocampome).match
    authors = hash.delete(:authors).split(', ')
    article = Article.create(hash)
    authors.each_with_index do |au, i|
      author = (Author[name: au] or Author.create(name: au))
      ArticleAuthorRel.create(Article_id: article.id, Author_id: author.id, author_pos: i)
    end
  end
end
