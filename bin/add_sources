#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'biblimatch'
require 'csv_port'
require 'hippocampome'
require 'rb-readline'

require File.expand_path('../config', '__FILE__')
require File.expand_path('../db/db_connection', '__FILE__')
require File.expand_path('../db/models', '__FILE__')

default_article_filepath = "/Users/seanmackesey/google_drive/hc/data/article.csv"
default_pmid_filepath = "/Users/seanmackesey/Desktop/pmids.txt"

article_filepath = Readline.readline("Enter path to article file (press return for default): ")
article_filepath = default_article_filepath if article_filepath.empty?
article_table = CSV.read(article_filepath, headers: true, header_converters: :symbol)
source_ids = Article.map(:pmid_isbn)

pmid_filepath = Readline.readline("Enter path to source id file: ")
pmid_filepath = default_pmid_filepath if pmid_filepath.empty?
sources_to_add = File.readlines(pmid_filepath).map{|li| li.chomp.to_i}.compact

puts "BEFORE: "
sources_to_add.each do |source| puts source end
puts
sources_to_add.reject!{|s| source_ids.include?(s)}
puts "AFTER: "
sources_to_add.each do |source| puts source end
if sources_to_add.any?
  sources_to_add.each do |pmid|
    hash = Biblimatch::Matcher.new({PMID: pmid}, :pubmed, output_database: :hippocampome).match
    binding.pry
    row_values = article_table.headers.map do |header|
      (hash[header] or nil)
    end
    article_table << row_values
  end
  File.write(article_filepath, article_table.to_csv)
  puts "All sources added!"
else
  puts "No new sources!"
end




